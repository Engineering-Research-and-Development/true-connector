### App setup
spring.banner.location=classpath:true-connector-banner.txt

logging.level.root=ERROR
logging.level.it.eng.idsa.businesslogic=INFO
logging.pattern.console=%d{dd-MM-yyyy HH:mm:ss.SSS} [%thread] %-5level %logger.%M - %msg%n

#define the directory where you can find certificates
application.targetDirectory=/cert/
#SSL Settings for https communication
#use https instead of http, if false the ssl settings can be empty
server.ssl.enabled=${SERVER_SSL_ENABLED}
application.ssl.key-store.name=${KEYSTORE_NAME}
application.ssl.key-store-password=${KEYSTORE_PASSWORD}
application.ssl.key-password=${KEY_PASSWORD}
server.ssl.key-alias=${ALIAS}

server.port=8449
server.max-http-header-size=15360
server.ssl.key-store=${application.targetDirectory}${application.ssl.key-store.name}
server.ssl.key-password=${application.ssl.key-password}
server.ssl.key-store-password=${application.ssl.key-store-password}
server.ssl.key-store-provider=SUN
server.ssl.key-store-type=JKS
server.ssl.SHA256=AC3BCAED1F01C63E18D4E0994C48D18EB6F79D01844564A4BA8476BE2D17F5E4

#### Enable WebSocket over Https
application.dataApp.websocket.isEnabled=${WS_EDGE}
#Enabling WS internally
application.websocket.isEnabled=${WS_ECC}

### DAPS Parameters (for getting token)
application.isEnabledDapsInteraction=true
#Cache token(true) or always use new token(false)
application.tokenCaching=${CACHE_TOKEN}
#Fetch and cache token on startup. application.tokenCaching must be true!
application.fetchTokenOnStartup=${FETCH_TOKEN_ON_STARTUP}
#possible values: v1,v2,orbiter
application.dapsVersion=v2

#AISEC v2 URL
application.dapsUrl=https://daps.aisec.fraunhofer.de/v2/token
#AISEC v1 URL
#application.dapsUrl=https://daps.aisec.fraunhofer.de/token
#ORBITER URL
#application.dapsUrl=http://212.81.222.225:8084/token

#AISEC DAPS settings
application.keyStoreName=${DAPS_KEYSTORE_NAME}
application.keyStorePassword=${DAPS_KEYSTORE_PASSWORD}
application.keystoreAliasName=${DAPS_KEYSTORE_ALIAS}
application.dapsJWKSUrl=https://daps.aisec.fraunhofer.de/
#Not used if you use AISEC v2
application.connectorUUID=4c49777d-4718-4d5c-9afe-1057849c1256
application.trustStoreName=${TRUSTORE_NAME}
application.trustStorePassword=${TRUSTORE_PASSWORD}

#ORBITER DAPS settings
application.daps.orbiter.privateKey=ecc-producer.key
application.daps.orbiter.password=ecc-producer.pem

#Disable SSL validation
application.disableSslVerification=${DISABLE_SSL_VALIDATION}

#enable protocol validation (default=true)
#correct protocol is required in Forward-To (https/http://example.com || wss://example.com || idscp://example.com)
application.validateProtocol=true

# BROKER 
application.selfdescription.registrateOnStartup=false
application.selfdescription.brokerURL=${BROKER_URL}

#Clearing House 
application.isEnabledClearingHouse=false
application.clearingHouseUrl=${CLEARING_HOUSE}
application.clearingHouseHashDir=/tmp

#Connector URIs
application.uriSchema=http
application.uriAuthority=//w3id.org/engrd
application.uriConnector=/connector/

#IDSCP2 enabled
application.idscp2.isEnabled=${IDSCP2}
application.idscp.server.ttpUri=https://localhost/nonexistingdummy_ttp
#Define if the connector is used as receiver or sender
application.isReceiver=false

#HTTP port
http.port=8081

#WSS Port
application.wss.server.port=8098

#Utils
application.name=@project.artifactId@
build.version=@project.version@
build.timestamp=@timestamp@

#Camel A endpoint
application.camelSenderPort=8887

#Camel B endpoint
application.camelReceiverPort=8889

#Open API Data APP
application.openDataAppReceiver=${DATA_APP_ENDPOINT}

# Multipart Body between Execution Core Container and Data APP
application.openDataAppReceiverRouter=${MULTIPART_EDGE}

#Multipart Body between connectors
application.eccHttpSendRouter=${MULTIPART_ECC}

#Camel - Spring Boot
camel.springboot.main-run-controller=true
camel.ssl.config.key-managers.key-password=${application.ssl.key-password}
camel.ssl.config.key-managers.key-store.resource=${application.targetDirectory}${application.ssl.key-store.name}
camel.ssl.config.key-managers.key-store.password=${application.ssl.key-store-password}

#Camel - HTTP4
camel.component.http4.use-global-ssl-context-parameters=${REST_ENABLE_HTTPS}

#Camel - Jetty
camel.component.jetty.use-global-ssl-context-parameters=${REST_ENABLE_HTTPS}
camel.component.jetty.keystore=${application.targetDirectory}${application.ssl.key-store.name}
camel.component.jetty.ssl-password=${application.ssl.key-store-password}
camel.component.jetty.ssl-key-password=${application.ssl.key-password}

information.model.version=4.0.0
application.basedir=@application.basedir@

# Usage Control App
application.isEnabledUsageControl=true
spring.ids.ucapp.baseUrl=${UC_DATAAPP_URI}
spring.ids.ucapp.addPolicyEndpoint=policy/usage/odrl

#Technical headers
application.technicalHeaders=header,Is-Enabled-DataApp-WebSocket,payload,Forward-To,Payload-Content-Type

#SelfDescription
application.selfdescription.description=Data Consumer Connector description
application.selfdescription.title=Data Consumer Connector title
application.selfdescription.curator=http://consumer.curatorURI.com
application.selfdescription.maintainer=http://consumer.maintainerURI.com

#For logging the response over WSS set to DEBUG, else leave empty
#logging.level.it.eng.idsa.businesslogic.processor.receiver=
